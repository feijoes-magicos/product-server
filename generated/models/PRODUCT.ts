
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PRODUCT` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PRODUCT
 * 
 */
export type PRODUCTModel = runtime.Types.Result.DefaultSelection<Prisma.$PRODUCTPayload>

export type AggregatePRODUCT = {
  _count: PRODUCTCountAggregateOutputType | null
  _avg: PRODUCTAvgAggregateOutputType | null
  _sum: PRODUCTSumAggregateOutputType | null
  _min: PRODUCTMinAggregateOutputType | null
  _max: PRODUCTMaxAggregateOutputType | null
}

export type PRODUCTAvgAggregateOutputType = {
  id: number | null
}

export type PRODUCTSumAggregateOutputType = {
  id: number | null
}

export type PRODUCTMinAggregateOutputType = {
  id: number | null
  name: string | null
  reference: string | null
  category: string | null
  subcategory: string | null
}

export type PRODUCTMaxAggregateOutputType = {
  id: number | null
  name: string | null
  reference: string | null
  category: string | null
  subcategory: string | null
}

export type PRODUCTCountAggregateOutputType = {
  id: number
  name: number
  reference: number
  category: number
  subcategory: number
  _all: number
}


export type PRODUCTAvgAggregateInputType = {
  id?: true
}

export type PRODUCTSumAggregateInputType = {
  id?: true
}

export type PRODUCTMinAggregateInputType = {
  id?: true
  name?: true
  reference?: true
  category?: true
  subcategory?: true
}

export type PRODUCTMaxAggregateInputType = {
  id?: true
  name?: true
  reference?: true
  category?: true
  subcategory?: true
}

export type PRODUCTCountAggregateInputType = {
  id?: true
  name?: true
  reference?: true
  category?: true
  subcategory?: true
  _all?: true
}

export type PRODUCTAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PRODUCT to aggregate.
   */
  where?: Prisma.PRODUCTWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PRODUCTS to fetch.
   */
  orderBy?: Prisma.PRODUCTOrderByWithRelationInput | Prisma.PRODUCTOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PRODUCTWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PRODUCTS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PRODUCTS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PRODUCTS
  **/
  _count?: true | PRODUCTCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PRODUCTAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PRODUCTSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PRODUCTMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PRODUCTMaxAggregateInputType
}

export type GetPRODUCTAggregateType<T extends PRODUCTAggregateArgs> = {
      [P in keyof T & keyof AggregatePRODUCT]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePRODUCT[P]>
    : Prisma.GetScalarType<T[P], AggregatePRODUCT[P]>
}




export type PRODUCTGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PRODUCTWhereInput
  orderBy?: Prisma.PRODUCTOrderByWithAggregationInput | Prisma.PRODUCTOrderByWithAggregationInput[]
  by: Prisma.PRODUCTScalarFieldEnum[] | Prisma.PRODUCTScalarFieldEnum
  having?: Prisma.PRODUCTScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PRODUCTCountAggregateInputType | true
  _avg?: PRODUCTAvgAggregateInputType
  _sum?: PRODUCTSumAggregateInputType
  _min?: PRODUCTMinAggregateInputType
  _max?: PRODUCTMaxAggregateInputType
}

export type PRODUCTGroupByOutputType = {
  id: number
  name: string
  reference: string
  category: string
  subcategory: string
  _count: PRODUCTCountAggregateOutputType | null
  _avg: PRODUCTAvgAggregateOutputType | null
  _sum: PRODUCTSumAggregateOutputType | null
  _min: PRODUCTMinAggregateOutputType | null
  _max: PRODUCTMaxAggregateOutputType | null
}

type GetPRODUCTGroupByPayload<T extends PRODUCTGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PRODUCTGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PRODUCTGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PRODUCTGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PRODUCTGroupByOutputType[P]>
      }
    >
  >



export type PRODUCTWhereInput = {
  AND?: Prisma.PRODUCTWhereInput | Prisma.PRODUCTWhereInput[]
  OR?: Prisma.PRODUCTWhereInput[]
  NOT?: Prisma.PRODUCTWhereInput | Prisma.PRODUCTWhereInput[]
  id?: Prisma.IntFilter<"PRODUCT"> | number
  name?: Prisma.StringFilter<"PRODUCT"> | string
  reference?: Prisma.StringFilter<"PRODUCT"> | string
  category?: Prisma.StringFilter<"PRODUCT"> | string
  subcategory?: Prisma.StringFilter<"PRODUCT"> | string
}

export type PRODUCTOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  category?: Prisma.SortOrder
  subcategory?: Prisma.SortOrder
  _relevance?: Prisma.PRODUCTOrderByRelevanceInput
}

export type PRODUCTWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.PRODUCTWhereInput | Prisma.PRODUCTWhereInput[]
  OR?: Prisma.PRODUCTWhereInput[]
  NOT?: Prisma.PRODUCTWhereInput | Prisma.PRODUCTWhereInput[]
  name?: Prisma.StringFilter<"PRODUCT"> | string
  reference?: Prisma.StringFilter<"PRODUCT"> | string
  category?: Prisma.StringFilter<"PRODUCT"> | string
  subcategory?: Prisma.StringFilter<"PRODUCT"> | string
}, "id">

export type PRODUCTOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  category?: Prisma.SortOrder
  subcategory?: Prisma.SortOrder
  _count?: Prisma.PRODUCTCountOrderByAggregateInput
  _avg?: Prisma.PRODUCTAvgOrderByAggregateInput
  _max?: Prisma.PRODUCTMaxOrderByAggregateInput
  _min?: Prisma.PRODUCTMinOrderByAggregateInput
  _sum?: Prisma.PRODUCTSumOrderByAggregateInput
}

export type PRODUCTScalarWhereWithAggregatesInput = {
  AND?: Prisma.PRODUCTScalarWhereWithAggregatesInput | Prisma.PRODUCTScalarWhereWithAggregatesInput[]
  OR?: Prisma.PRODUCTScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PRODUCTScalarWhereWithAggregatesInput | Prisma.PRODUCTScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"PRODUCT"> | number
  name?: Prisma.StringWithAggregatesFilter<"PRODUCT"> | string
  reference?: Prisma.StringWithAggregatesFilter<"PRODUCT"> | string
  category?: Prisma.StringWithAggregatesFilter<"PRODUCT"> | string
  subcategory?: Prisma.StringWithAggregatesFilter<"PRODUCT"> | string
}

export type PRODUCTCreateInput = {
  name: string
  reference: string
  category: string
  subcategory: string
}

export type PRODUCTUncheckedCreateInput = {
  id?: number
  name: string
  reference: string
  category: string
  subcategory: string
}

export type PRODUCTUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  subcategory?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PRODUCTUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  subcategory?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PRODUCTCreateManyInput = {
  id?: number
  name: string
  reference: string
  category: string
  subcategory: string
}

export type PRODUCTUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  subcategory?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PRODUCTUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  subcategory?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PRODUCTOrderByRelevanceInput = {
  fields: Prisma.PRODUCTOrderByRelevanceFieldEnum | Prisma.PRODUCTOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type PRODUCTCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  category?: Prisma.SortOrder
  subcategory?: Prisma.SortOrder
}

export type PRODUCTAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PRODUCTMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  category?: Prisma.SortOrder
  subcategory?: Prisma.SortOrder
}

export type PRODUCTMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  category?: Prisma.SortOrder
  subcategory?: Prisma.SortOrder
}

export type PRODUCTSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type PRODUCTSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  reference?: boolean
  category?: boolean
  subcategory?: boolean
}, ExtArgs["result"]["pRODUCT"]>



export type PRODUCTSelectScalar = {
  id?: boolean
  name?: boolean
  reference?: boolean
  category?: boolean
  subcategory?: boolean
}

export type PRODUCTOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "reference" | "category" | "subcategory", ExtArgs["result"]["pRODUCT"]>

export type $PRODUCTPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PRODUCT"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    reference: string
    category: string
    subcategory: string
  }, ExtArgs["result"]["pRODUCT"]>
  composites: {}
}

export type PRODUCTGetPayload<S extends boolean | null | undefined | PRODUCTDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PRODUCTPayload, S>

export type PRODUCTCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PRODUCTFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PRODUCTCountAggregateInputType | true
  }

export interface PRODUCTDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PRODUCT'], meta: { name: 'PRODUCT' } }
  /**
   * Find zero or one PRODUCT that matches the filter.
   * @param {PRODUCTFindUniqueArgs} args - Arguments to find a PRODUCT
   * @example
   * // Get one PRODUCT
   * const pRODUCT = await prisma.pRODUCT.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PRODUCTFindUniqueArgs>(args: Prisma.SelectSubset<T, PRODUCTFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PRODUCTClient<runtime.Types.Result.GetResult<Prisma.$PRODUCTPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PRODUCT that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PRODUCTFindUniqueOrThrowArgs} args - Arguments to find a PRODUCT
   * @example
   * // Get one PRODUCT
   * const pRODUCT = await prisma.pRODUCT.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PRODUCTFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PRODUCTFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PRODUCTClient<runtime.Types.Result.GetResult<Prisma.$PRODUCTPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PRODUCT that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PRODUCTFindFirstArgs} args - Arguments to find a PRODUCT
   * @example
   * // Get one PRODUCT
   * const pRODUCT = await prisma.pRODUCT.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PRODUCTFindFirstArgs>(args?: Prisma.SelectSubset<T, PRODUCTFindFirstArgs<ExtArgs>>): Prisma.Prisma__PRODUCTClient<runtime.Types.Result.GetResult<Prisma.$PRODUCTPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PRODUCT that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PRODUCTFindFirstOrThrowArgs} args - Arguments to find a PRODUCT
   * @example
   * // Get one PRODUCT
   * const pRODUCT = await prisma.pRODUCT.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PRODUCTFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PRODUCTFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PRODUCTClient<runtime.Types.Result.GetResult<Prisma.$PRODUCTPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PRODUCTS that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PRODUCTFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PRODUCTS
   * const pRODUCTS = await prisma.pRODUCT.findMany()
   * 
   * // Get first 10 PRODUCTS
   * const pRODUCTS = await prisma.pRODUCT.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pRODUCTWithIdOnly = await prisma.pRODUCT.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PRODUCTFindManyArgs>(args?: Prisma.SelectSubset<T, PRODUCTFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PRODUCTPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PRODUCT.
   * @param {PRODUCTCreateArgs} args - Arguments to create a PRODUCT.
   * @example
   * // Create one PRODUCT
   * const PRODUCT = await prisma.pRODUCT.create({
   *   data: {
   *     // ... data to create a PRODUCT
   *   }
   * })
   * 
   */
  create<T extends PRODUCTCreateArgs>(args: Prisma.SelectSubset<T, PRODUCTCreateArgs<ExtArgs>>): Prisma.Prisma__PRODUCTClient<runtime.Types.Result.GetResult<Prisma.$PRODUCTPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PRODUCTS.
   * @param {PRODUCTCreateManyArgs} args - Arguments to create many PRODUCTS.
   * @example
   * // Create many PRODUCTS
   * const pRODUCT = await prisma.pRODUCT.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PRODUCTCreateManyArgs>(args?: Prisma.SelectSubset<T, PRODUCTCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a PRODUCT.
   * @param {PRODUCTDeleteArgs} args - Arguments to delete one PRODUCT.
   * @example
   * // Delete one PRODUCT
   * const PRODUCT = await prisma.pRODUCT.delete({
   *   where: {
   *     // ... filter to delete one PRODUCT
   *   }
   * })
   * 
   */
  delete<T extends PRODUCTDeleteArgs>(args: Prisma.SelectSubset<T, PRODUCTDeleteArgs<ExtArgs>>): Prisma.Prisma__PRODUCTClient<runtime.Types.Result.GetResult<Prisma.$PRODUCTPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PRODUCT.
   * @param {PRODUCTUpdateArgs} args - Arguments to update one PRODUCT.
   * @example
   * // Update one PRODUCT
   * const pRODUCT = await prisma.pRODUCT.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PRODUCTUpdateArgs>(args: Prisma.SelectSubset<T, PRODUCTUpdateArgs<ExtArgs>>): Prisma.Prisma__PRODUCTClient<runtime.Types.Result.GetResult<Prisma.$PRODUCTPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PRODUCTS.
   * @param {PRODUCTDeleteManyArgs} args - Arguments to filter PRODUCTS to delete.
   * @example
   * // Delete a few PRODUCTS
   * const { count } = await prisma.pRODUCT.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PRODUCTDeleteManyArgs>(args?: Prisma.SelectSubset<T, PRODUCTDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PRODUCTS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PRODUCTUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PRODUCTS
   * const pRODUCT = await prisma.pRODUCT.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PRODUCTUpdateManyArgs>(args: Prisma.SelectSubset<T, PRODUCTUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one PRODUCT.
   * @param {PRODUCTUpsertArgs} args - Arguments to update or create a PRODUCT.
   * @example
   * // Update or create a PRODUCT
   * const pRODUCT = await prisma.pRODUCT.upsert({
   *   create: {
   *     // ... data to create a PRODUCT
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PRODUCT we want to update
   *   }
   * })
   */
  upsert<T extends PRODUCTUpsertArgs>(args: Prisma.SelectSubset<T, PRODUCTUpsertArgs<ExtArgs>>): Prisma.Prisma__PRODUCTClient<runtime.Types.Result.GetResult<Prisma.$PRODUCTPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PRODUCTS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PRODUCTCountArgs} args - Arguments to filter PRODUCTS to count.
   * @example
   * // Count the number of PRODUCTS
   * const count = await prisma.pRODUCT.count({
   *   where: {
   *     // ... the filter for the PRODUCTS we want to count
   *   }
   * })
  **/
  count<T extends PRODUCTCountArgs>(
    args?: Prisma.Subset<T, PRODUCTCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PRODUCTCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PRODUCT.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PRODUCTAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PRODUCTAggregateArgs>(args: Prisma.Subset<T, PRODUCTAggregateArgs>): Prisma.PrismaPromise<GetPRODUCTAggregateType<T>>

  /**
   * Group by PRODUCT.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PRODUCTGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PRODUCTGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PRODUCTGroupByArgs['orderBy'] }
      : { orderBy?: PRODUCTGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PRODUCTGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPRODUCTGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PRODUCT model
 */
readonly fields: PRODUCTFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PRODUCT.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PRODUCTClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PRODUCT model
 */
export interface PRODUCTFieldRefs {
  readonly id: Prisma.FieldRef<"PRODUCT", 'Int'>
  readonly name: Prisma.FieldRef<"PRODUCT", 'String'>
  readonly reference: Prisma.FieldRef<"PRODUCT", 'String'>
  readonly category: Prisma.FieldRef<"PRODUCT", 'String'>
  readonly subcategory: Prisma.FieldRef<"PRODUCT", 'String'>
}
    

// Custom InputTypes
/**
 * PRODUCT findUnique
 */
export type PRODUCTFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PRODUCT
   */
  select?: Prisma.PRODUCTSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PRODUCT
   */
  omit?: Prisma.PRODUCTOmit<ExtArgs> | null
  /**
   * Filter, which PRODUCT to fetch.
   */
  where: Prisma.PRODUCTWhereUniqueInput
}

/**
 * PRODUCT findUniqueOrThrow
 */
export type PRODUCTFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PRODUCT
   */
  select?: Prisma.PRODUCTSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PRODUCT
   */
  omit?: Prisma.PRODUCTOmit<ExtArgs> | null
  /**
   * Filter, which PRODUCT to fetch.
   */
  where: Prisma.PRODUCTWhereUniqueInput
}

/**
 * PRODUCT findFirst
 */
export type PRODUCTFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PRODUCT
   */
  select?: Prisma.PRODUCTSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PRODUCT
   */
  omit?: Prisma.PRODUCTOmit<ExtArgs> | null
  /**
   * Filter, which PRODUCT to fetch.
   */
  where?: Prisma.PRODUCTWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PRODUCTS to fetch.
   */
  orderBy?: Prisma.PRODUCTOrderByWithRelationInput | Prisma.PRODUCTOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PRODUCTS.
   */
  cursor?: Prisma.PRODUCTWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PRODUCTS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PRODUCTS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PRODUCTS.
   */
  distinct?: Prisma.PRODUCTScalarFieldEnum | Prisma.PRODUCTScalarFieldEnum[]
}

/**
 * PRODUCT findFirstOrThrow
 */
export type PRODUCTFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PRODUCT
   */
  select?: Prisma.PRODUCTSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PRODUCT
   */
  omit?: Prisma.PRODUCTOmit<ExtArgs> | null
  /**
   * Filter, which PRODUCT to fetch.
   */
  where?: Prisma.PRODUCTWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PRODUCTS to fetch.
   */
  orderBy?: Prisma.PRODUCTOrderByWithRelationInput | Prisma.PRODUCTOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PRODUCTS.
   */
  cursor?: Prisma.PRODUCTWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PRODUCTS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PRODUCTS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PRODUCTS.
   */
  distinct?: Prisma.PRODUCTScalarFieldEnum | Prisma.PRODUCTScalarFieldEnum[]
}

/**
 * PRODUCT findMany
 */
export type PRODUCTFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PRODUCT
   */
  select?: Prisma.PRODUCTSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PRODUCT
   */
  omit?: Prisma.PRODUCTOmit<ExtArgs> | null
  /**
   * Filter, which PRODUCTS to fetch.
   */
  where?: Prisma.PRODUCTWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PRODUCTS to fetch.
   */
  orderBy?: Prisma.PRODUCTOrderByWithRelationInput | Prisma.PRODUCTOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PRODUCTS.
   */
  cursor?: Prisma.PRODUCTWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PRODUCTS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PRODUCTS.
   */
  skip?: number
  distinct?: Prisma.PRODUCTScalarFieldEnum | Prisma.PRODUCTScalarFieldEnum[]
}

/**
 * PRODUCT create
 */
export type PRODUCTCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PRODUCT
   */
  select?: Prisma.PRODUCTSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PRODUCT
   */
  omit?: Prisma.PRODUCTOmit<ExtArgs> | null
  /**
   * The data needed to create a PRODUCT.
   */
  data: Prisma.XOR<Prisma.PRODUCTCreateInput, Prisma.PRODUCTUncheckedCreateInput>
}

/**
 * PRODUCT createMany
 */
export type PRODUCTCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PRODUCTS.
   */
  data: Prisma.PRODUCTCreateManyInput | Prisma.PRODUCTCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PRODUCT update
 */
export type PRODUCTUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PRODUCT
   */
  select?: Prisma.PRODUCTSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PRODUCT
   */
  omit?: Prisma.PRODUCTOmit<ExtArgs> | null
  /**
   * The data needed to update a PRODUCT.
   */
  data: Prisma.XOR<Prisma.PRODUCTUpdateInput, Prisma.PRODUCTUncheckedUpdateInput>
  /**
   * Choose, which PRODUCT to update.
   */
  where: Prisma.PRODUCTWhereUniqueInput
}

/**
 * PRODUCT updateMany
 */
export type PRODUCTUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PRODUCTS.
   */
  data: Prisma.XOR<Prisma.PRODUCTUpdateManyMutationInput, Prisma.PRODUCTUncheckedUpdateManyInput>
  /**
   * Filter which PRODUCTS to update
   */
  where?: Prisma.PRODUCTWhereInput
  /**
   * Limit how many PRODUCTS to update.
   */
  limit?: number
}

/**
 * PRODUCT upsert
 */
export type PRODUCTUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PRODUCT
   */
  select?: Prisma.PRODUCTSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PRODUCT
   */
  omit?: Prisma.PRODUCTOmit<ExtArgs> | null
  /**
   * The filter to search for the PRODUCT to update in case it exists.
   */
  where: Prisma.PRODUCTWhereUniqueInput
  /**
   * In case the PRODUCT found by the `where` argument doesn't exist, create a new PRODUCT with this data.
   */
  create: Prisma.XOR<Prisma.PRODUCTCreateInput, Prisma.PRODUCTUncheckedCreateInput>
  /**
   * In case the PRODUCT was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PRODUCTUpdateInput, Prisma.PRODUCTUncheckedUpdateInput>
}

/**
 * PRODUCT delete
 */
export type PRODUCTDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PRODUCT
   */
  select?: Prisma.PRODUCTSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PRODUCT
   */
  omit?: Prisma.PRODUCTOmit<ExtArgs> | null
  /**
   * Filter which PRODUCT to delete.
   */
  where: Prisma.PRODUCTWhereUniqueInput
}

/**
 * PRODUCT deleteMany
 */
export type PRODUCTDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PRODUCTS to delete
   */
  where?: Prisma.PRODUCTWhereInput
  /**
   * Limit how many PRODUCTS to delete.
   */
  limit?: number
}

/**
 * PRODUCT without action
 */
export type PRODUCTDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PRODUCT
   */
  select?: Prisma.PRODUCTSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PRODUCT
   */
  omit?: Prisma.PRODUCTOmit<ExtArgs> | null
}
